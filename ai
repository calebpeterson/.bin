#!/usr/bin/env bun

import { isEmpty, isString, trim } from "lodash";
import { v4 as uuid4 } from "uuid";
import "zx/globals";
import { appendMessage } from "./lib/ai/append-message";
import { chooseConversation } from "./lib/ai/choose-conversation";
import { completeConversation } from "./lib/ai/complete-conversation";
import {
  ASSISTANT_PROMPT,
  META_FORMAT,
  USER_PROMPT,
  USER_PROMPT_2,
} from "./lib/ai/constants";
import { countWords } from "./lib/ai/count-words";
import { estimateReadingTime } from "./lib/ai/estimate-reading-time";
import { getTemperature } from "./lib/ai/get-temperature";
import { listConversations } from "./lib/ai/list-conversations";
import { listModels } from "./lib/ai/list-models";
import { Conversation } from "./lib/ai/llm-types";
import { parseChat } from "./lib/ai/parse-llm-chat";
import {
  selectInteractiveAction,
  selectModel,
  selectTerminalTitle,
} from "./lib/ai/selectors";
import { EXIT_COMMAND, SLASH_COMMANDS } from "./lib/ai/slash-commands";
import { Store } from "./lib/ai/store";
import { State } from "./lib/ai/types";
import { writeConversation } from "./lib/ai/write-conversation";
import { formatMarkdown } from "./lib/format-markdown";
import { hr } from "./lib/horizontal-rule";
import { setTerminalTitle } from "./lib/set-terminal-title";
import { withDefaultExtension } from "./lib/with-default-extension";

const ROOT_DIR = argv._[0] ?? `${os.homedir()}/.ai`;

const store = new Store<State>({
  ROOT_DIR,
  CONVERSATION_BASENAME: uuid4(),
  model: argv.model ?? "gpt-4o",
  temperature: getTemperature(argv.temperature),
  messages: [],
});

// Ensure the conversations directory exists
await $`mkdir -p ${ROOT_DIR}`;

// List sessions
if (argv.list) {
  await listConversations(ROOT_DIR);

  process.exit(0);
}

// List models and exit if given the --models flag
if (argv.models) {
  await listModels();

  process.exit(0);
}

// Complete a prompt
if (argv.complete) {
  const conversationBasename = argv.complete;

  if (!conversationBasename) {
    console.log(
      META_FORMAT(`Usage: ${process.argv[1]} --complete <conversation>`)
    );
    process.exit(1);
  }

  const content = await fs.readFile(
    path.join(store.get("ROOT_DIR"), conversationBasename + ".md"),
    "utf8"
  );
  const { meta, messages } = await parseChat(content);

  const model = "model" in meta ? (meta.model as string) : "gpt-4o";
  const temperature =
    "temperature" in meta ? getTemperature(meta.temperature) : 0.7;

  const response = await completeConversation(model, messages, temperature);

  const completed: Conversation = [
    ...messages,
    {
      role: "assistant",
      content: response,
    },
  ];

  const wordCount = countWords(response);
  const estimatedReadingTime = estimateReadingTime(response);
  console.log(
    META_FORMAT(
      `\n\nEstimated reading time: ${estimatedReadingTime} minutes (${wordCount} words)`
    )
  );

  // Write the entire conversation to file
  const target = argv.target;
  if (target) {
    await writeConversation(store.get("ROOT_DIR"), target, completed, {
      model: store.get("model"),
    });
  }

  // Output only the last response to file
  const output = argv.output;
  if (output) {
    await fs.writeFile(withDefaultExtension(output, ".md"), response, "utf8");
  }

  process.exit(0);
}

// Delete a previous conversation
if (argv.delete) {
  const conversationBasename = await chooseConversation(ROOT_DIR);

  if (!conversationBasename) {
    process.exit(1);
  }

  await $`rm ${ROOT_DIR}/${conversationBasename}.md`;

  console.log(META_FORMAT(`Deleted conversation "${conversationBasename}"`));

  process.exit(0);
}

// Clear the console for interactive use
console.clear();

// Continue a previous conversation?
if (argv.continue || argv.resume) {
  // If the user provided a filename, continue from that file
  const basenameFromCommand = argv.continue ?? argv.resume;

  // Otherwise prompt the user to choose from conversations in the ROOT_DIR
  const conversationBasename =
    isString(basenameFromCommand) && !isEmpty(trim(basenameFromCommand))
      ? basenameFromCommand
      : await chooseConversation(ROOT_DIR);

  if (!conversationBasename) {
    process.exit(1);
  }

  console.log(META_FORMAT(`Continuing from "${conversationBasename}".`));

  store.set("CONVERSATION_BASENAME", argv.target ?? conversationBasename);

  const content = await fs.readFile(
    path.join(store.get("ROOT_DIR"), conversationBasename + ".md"),
    "utf8"
  );
  const { meta, messages: history } = await parseChat(content);

  if ("model" in meta) {
    store.set("model", meta.model as string);
  }

  if ("temperature" in meta) {
    store.set("temperature", getTemperature(meta.temperature));
  }

  store.set("messages", [...history]);

  const lastMessage = history[history.length - 1];

  if (lastMessage.role === "assistant") {
    // Display the last message of the conversation
    const lastMessageFormatted = await formatMarkdown(lastMessage.content);
    hr();
    console.log(ASSISTANT_PROMPT + lastMessageFormatted);
  } else {
    const state = store.getState();
    const response = await completeConversation(state.model, state.messages);

    await appendMessage(store, {
      role: "assistant",
      content: response,
    });

    console.log("\n");
  }
}

setTerminalTitle(selectTerminalTitle(store.getState()));

// Welcome message
hr();
const action = selectInteractiveAction(store);
console.log(
  META_FORMAT(
    `Chat with ${selectModel(
      store.getState()
    )} ${action}. Type '${EXIT_COMMAND}' to end the conversation. An empty line sends the current message buffer.`
  )
);
hr();

let inputBuffer = "";

// Main chat loop
while (true) {
  if (inputBuffer.length === 0) {
    console.log("");
  }

  const input = await question(
    inputBuffer.length === 0 ? USER_PROMPT : USER_PROMPT_2
  );

  const [command] = input.toLowerCase().split(" ");
  if (command in SLASH_COMMANDS) {
    console.log("");
    hr();
    await SLASH_COMMANDS[command].run(store, input);
    hr();
    continue;
  }

  if (input.startsWith("/")) {
    console.log(META_FORMAT(`Unknown command: ${input}`));
    continue;
  }

  // Non-empty lines are appended to the current message
  if (input.length !== 0) {
    inputBuffer += input;
    setTerminalTitle("Press ENTER again to send the message.", { bell: true });
    continue;
  }

  setTerminalTitle(selectTerminalTitle(store.getState()));

  await appendMessage(store, { role: "user", content: inputBuffer });

  const { messages, model, temperature } = store.getState();
  const response = await completeConversation(model, messages, temperature);

  await appendMessage(store, {
    role: "assistant",
    content: response,
  });

  inputBuffer = "";

  hr();
}
