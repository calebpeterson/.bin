#!/usr/bin/env bun

import { isEmpty, isString, trim } from "lodash";
import { v4 as uuid4 } from "uuid";
import "zx/globals";
import { chooseConversation } from "./lib/ai/choose-conversation";
import { completeConversation } from "./lib/ai/complete-conversation";
import {
  ASSISTANT_PROMPT,
  META_FORMAT,
  USER_PROMPT,
  USER_PROMPT_2,
} from "./lib/ai/constants";
import { countWords } from "./lib/ai/count-words";
import { estimateReadingTime } from "./lib/ai/estimate-reading-time";
import { generateTitle } from "./lib/ai/generate-title";
import { listConversations } from "./lib/ai/list-conversations";
import { listModels } from "./lib/ai/list-models";
import { ChatMessage, Conversation } from "./lib/ai/llm-types";
import { parseChat } from "./lib/ai/parse-llm-chat";
import { renameConversation } from "./lib/ai/rename-conversation";
import { SlashCommand } from "./lib/ai/types";
import { writeConversation } from "./lib/ai/write-journal";
import { formatMarkdown } from "./lib/format-markdown";
import { hr } from "./lib/horizontal-rule";
import { setTerminalTitle } from "./lib/set-terminal-title";
import { withDefaultExtension } from "./lib/with-default-extension";

const HELP_COMMAND = "/help";
const EXIT_COMMAND = "/exit";
const NEW_COMMAND = "/new";
const RENAME_COMMAND = "/rename";
const DELETE_COMMAND = "/delete";
const COPY_COMMAND = "/copy";
const STATUS_COMMAND = "/status";
const AUTO_NAME_COMMAND = "/auto-name";
const DROP_LAST_COMMAND = "/drop-last";
const WRITE_LAST_COMMAND = "/write-last";
const PWD_COMMAND = "/pwd";

const ROOT_DIR = argv._[0] ?? `${os.homedir()}/.ai`;

let CONVERSATION_BASENAME = uuid4();

// Ensure the conversations directory exists
await $`mkdir -p ${ROOT_DIR}`;

// List sessions
if (argv.list) {
  await listConversations(ROOT_DIR);

  process.exit(0);
}

// List models and exit if given the --models flag
if (argv.models) {
  await listModels();

  process.exit(0);
}

// The LLM model to use
let provider = argv.provider ?? "openai";
let model = argv.model ?? "gpt-4o";

// The messages in the conversation
const messages: Conversation = [];

if (argv.complete) {
  const conversationBasename = argv.complete;

  if (!conversationBasename) {
    console.log(
      META_FORMAT(`Usage: ${process.argv[1]} --complete <conversation>`)
    );
    process.exit(1);
  }

  const content = await fs.readFile(
    path.join(ROOT_DIR, conversationBasename + ".md"),
    "utf8"
  );
  const { meta, messages } = await parseChat(content);

  if ("model" in meta) {
    model = meta.model;
  }

  const response = await completeConversation(model, messages);

  const completed = [
    ...messages,
    {
      role: "assistant",
      content: response,
    },
  ];

  const wordCount = countWords(response);
  const estimatedReadingTime = estimateReadingTime(response);
  console.log(
    META_FORMAT(
      `\n\nEstimated reading time: ${estimatedReadingTime} minutes (${wordCount} words)`
    )
  );

  // Write the entire conversation to file
  const target = argv.target;
  if (target) {
    await writeConversation(ROOT_DIR, target, completed, { model });
  }

  // Output only the last response to file
  const output = argv.output;
  if (output) {
    await fs.writeFile(withDefaultExtension(output, ".md"), response, "utf8");
  }

  process.exit(0);
}

// Delete a previous conversation
if (argv.delete) {
  const conversationBasename = await chooseConversation(ROOT_DIR);

  if (!conversationBasename) {
    process.exit(1);
  }

  await $`rm ${ROOT_DIR}/${conversationBasename}.md`;

  console.log(META_FORMAT(`Deleted conversation "${conversationBasename}"`));

  process.exit(0);
}

// Clear the console for interactive use
console.clear();

// Append the message and journal the conversation
const appendMessage = (message: ChatMessage) => {
  messages.push({ id: uuid4(), ...message });
  writeConversation(ROOT_DIR, CONVERSATION_BASENAME, messages, { model });
};

// Continue a previous conversation?
if (argv.continue || argv.resume) {
  // If the user provided a filename, continue from that file
  const basenameFromCommand = argv.continue ?? argv.resume;

  // Otherwise prompt the user to choose from conversations in the ROOT_DIR
  const conversationBasename =
    isString(basenameFromCommand) && !isEmpty(trim(basenameFromCommand))
      ? basenameFromCommand
      : await chooseConversation(ROOT_DIR);

  if (!conversationBasename) {
    process.exit(1);
  }

  console.log(META_FORMAT(`Continuing from "${conversationBasename}".`));

  CONVERSATION_BASENAME = argv.target ?? conversationBasename;

  const content = await fs.readFile(
    path.join(ROOT_DIR, conversationBasename + ".md"),
    "utf8"
  );
  const { meta, messages: history } = await parseChat(content);

  if ("model" in meta) {
    model = meta.model;
  }

  messages.push(...history);

  const lastMessage = messages[messages.length - 1];

  if (lastMessage.role === "assistant") {
    // Display the last message of the conversation
    const lastMessageFormatted = await formatMarkdown(lastMessage.content);
    hr();
    console.log(ASSISTANT_PROMPT + lastMessageFormatted);
  } else {
    const response = await completeConversation(model, messages);

    appendMessage({
      role: "assistant",
      content: response,
    });

    console.log("\n");
  }
}

setTerminalTitle(CONVERSATION_BASENAME);

// Welcome message
hr();
const action = messages.length ? "resumed" : "started";
console.log(
  META_FORMAT(
    `Chat with ${model} ${action}. Type '${EXIT_COMMAND}' to end the conversation. An empty line sends the current message buffer.`
  )
);
hr();

const SLASH_COMMANDS: Record<string, SlashCommand> = {
  [HELP_COMMAND]: {
    help: "Show this help message.",
    run: async (input: string) => {
      console.log(chalk.grey("Available commands:"));
      for (const [command, { help }] of Object.entries(SLASH_COMMANDS)) {
        console.log(chalk.grey(`  ${command.padEnd(15)} ${help}`));
      }
    },
  },

  [NEW_COMMAND]: {
    help: "Start a new conversation.",
    run: async (input: string) => {
      console.clear();
      messages.length = 0;
      CONVERSATION_BASENAME = uuid4();
      setTerminalTitle(CONVERSATION_BASENAME);
      console.log(META_FORMAT(`Started a new conversation with ${model}.`));
    },
  },

  [STATUS_COMMAND]: {
    help: "Show the current conversation status.",
    run: async (input: string) => {
      console.log(META_FORMAT(`Conversation: ${CONVERSATION_BASENAME}`));
      console.log(META_FORMAT(`Model:        ${model}`));
      console.log(META_FORMAT(`Messages:     ${messages.length}`));
    },
  },

  [EXIT_COMMAND]: {
    help: "End the conversation and quit.",
    run: async (input: string) => {
      console.clear();
      process.exit(0);
    },
  },

  [COPY_COMMAND]: {
    help: "Copy the last message to the clipboard.",
    run: async (input: string) => {
      const lastMessage = messages[messages.length - 1];
      await $`echo ${lastMessage.content} | pbcopy`;
      console.log(META_FORMAT(`Copied last message to clipboard.`));
    },
  },

  [RENAME_COMMAND]: {
    help: "Rename the current conversation.",
    run: async (input: string) => {
      const newName = input.slice(RENAME_COMMAND.length).trim();

      if (newName) {
        await renameConversation(ROOT_DIR, CONVERSATION_BASENAME, newName);
        CONVERSATION_BASENAME = newName;
      } else {
        console.log(
          META_FORMAT(`No name provided. Usage: ${RENAME_COMMAND} <name>`)
        );
      }
    },
  },

  [AUTO_NAME_COMMAND]: {
    help: "Generate a title for the conversation.",
    run: async (input: string) => {
      const newName = await generateTitle(model, messages);

      if (newName) {
        await renameConversation(ROOT_DIR, CONVERSATION_BASENAME, newName);
        CONVERSATION_BASENAME = newName;
      } else {
        console.log(META_FORMAT(`No name suggested.`));
      }
    },
  },

  [DELETE_COMMAND]: {
    help: "Delete the current conversation and start a new one.",
    run: async (input: string) => {
      console.clear();

      await $`rm ${ROOT_DIR}/${CONVERSATION_BASENAME}.md`;
      console.log(
        META_FORMAT(`Deleted conversation "${CONVERSATION_BASENAME}"`)
      );

      messages.length = 0;
      CONVERSATION_BASENAME = uuid4();

      setTerminalTitle(CONVERSATION_BASENAME);

      console.log(META_FORMAT(`Started a new conversation with ${model}.`));
    },
  },

  [DROP_LAST_COMMAND]: {
    help: "Drop the last user/assistant message pair from the conversation.",
    run: async (input: string) => {
      if (messages.length < 2) {
        console.log(META_FORMAT(`No messages to drop.`));
      } else {
        messages.pop();
        messages.pop();

        await writeConversation(ROOT_DIR, CONVERSATION_BASENAME, messages, {
          model,
        });

        console.log(META_FORMAT(`Dropped last message.`));
      }
    },
  },

  [WRITE_LAST_COMMAND]: {
    help: "Write the last message to a file.",
    run: async (input: string) => {
      if (messages.length === 0) {
        console.log(META_FORMAT(`No message to write.`));
      } else {
        const filename = input.slice(WRITE_LAST_COMMAND.length).trim();

        if (filename) {
          await fs.writeFile(
            withDefaultExtension(filename, ".md"),
            messages[messages.length - 1].content,
            "utf8"
          );

          console.log(META_FORMAT(`Wrote last message to "${filename}".`));
        } else {
          console.log(
            META_FORMAT(
              `No filename provided. Usage: ${WRITE_LAST_COMMAND} <filename>`
            )
          );
        }
      }
    },
  },

  [PWD_COMMAND]: {
    help: "Show the current working directory.",
    run: async (input: string) => {
      console.log(META_FORMAT(`Current working directory: ${ROOT_DIR}`));
    },
  },
};

let inputBuffer = "";

// Main chat loop
while (true) {
  if (inputBuffer.length === 0) {
    console.log("");
  }

  const input = await question(
    inputBuffer.length === 0 ? USER_PROMPT : USER_PROMPT_2
  );

  const [command] = input.toLowerCase().split(" ");
  if (command in SLASH_COMMANDS) {
    console.log("");
    hr();
    await SLASH_COMMANDS[command].run(input);
    hr();
    continue;
  }

  if (input.startsWith("/")) {
    console.log(META_FORMAT(`Unknown command: ${input}`));
    continue;
  }

  // Non-empty lines are appended to the current message
  if (input.length !== 0) {
    inputBuffer += input;
    setTerminalTitle("Press ENTER again to send the message.", { bell: true });
    continue;
  }

  setTerminalTitle(CONVERSATION_BASENAME);

  appendMessage({ role: "user", content: inputBuffer });

  const response = await completeConversation(model, messages);

  appendMessage({
    role: "assistant",
    content: response,
  });

  inputBuffer = "";

  hr();
}
