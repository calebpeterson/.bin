#!/usr/bin/env bun

import { v4 as uuid4 } from "uuid";
import "zx/globals";
import { chooseConversation } from "./lib/ai/choose-conversation";
import { completeConversation } from "./lib/ai/complete-conversation";
import {
  ASSISTANT_PROMPT,
  META_FORMAT,
  USER_PROMPT,
  USER_PROMPT_2,
} from "./lib/ai/constants";
import { countWords } from "./lib/ai/count-words";
import { estimateReadingTime } from "./lib/ai/estimate-reading-time";
import { generateTitle } from "./lib/ai/generate-title";
import { listConversations } from "./lib/ai/list-conversations";
import { listModels } from "./lib/ai/list-models";
import { ChatMessage, Conversation } from "./lib/ai/llm-types";
import { parseChat } from "./lib/ai/parse-llm-chat";
import { renameConversation } from "./lib/ai/rename-conversation";
import { writeConversation } from "./lib/ai/write-journal";
import { formatMarkdown } from "./lib/format-markdown";
import { setTerminalTitle } from "./lib/set-terminal-title";
import { withDefaultExtension } from "./lib/with-default-extension";

const HELP_COMMAND = "/help";
const EXIT_COMMAND = "/exit";
const NEW_COMMAND = "/new";
const RENAME_COMMAND = "/rename";
const DELETE_COMMAND = "/delete";
const COPY_COMMAND = "/copy";
const STATUS_COMMAND = "/status";
const AUTO_NAME_COMMAND = "/auto-name";
const DROP_LAST_COMMAND = "/drop-last";
const PWD_COMMAND = "/pwd";

const HELP = {
  [HELP_COMMAND]: "Show this help message.",
  [EXIT_COMMAND]: "End the conversation and quit.",
  [NEW_COMMAND]: "Start a new conversation.",
  [RENAME_COMMAND]: "Rename the current conversation.",
  [DELETE_COMMAND]: "Delete the current conversation and start a new one.",
  [COPY_COMMAND]: "Copy the last message to the clipboard.",
  [STATUS_COMMAND]: "Show the current conversation status.",
  [AUTO_NAME_COMMAND]: "Generate a title for the conversation.",
  [DROP_LAST_COMMAND]:
    "Drop the last user/assistant message pair from the conversation.",
  [PWD_COMMAND]: "Show the current working directory.",
};

const COMMANDS = {
  [HELP_COMMAND]: async (input: string) => {
    console.log("Available commands:");
    for (const [command, description] of Object.entries(HELP)) {
      console.log(`  ${command.padEnd(15)} ${description}`);
    }
  },

  [NEW_COMMAND]: async (input: string) => {
    console.clear();
    messages.length = 0;
    CONVERSATION_BASENAME = uuid4();
    setTerminalTitle(CONVERSATION_BASENAME);
    console.log(META_FORMAT(`Started a new conversation with ${model}.`));
  },

  [STATUS_COMMAND]: async (input: string) => {
    console.log(META_FORMAT(`Conversation: ${CONVERSATION_BASENAME}`));
    console.log(META_FORMAT(`Model:        ${model}`));
    console.log(META_FORMAT(`Messages:     ${messages.length}`));
  },

  [EXIT_COMMAND]: async (input: string) => {
    console.clear();
    process.exit(0);
  },

  [COPY_COMMAND]: async (input: string) => {
    await $`echo ${messages[messages.length - 1].content} | pbcopy`;
    console.log(META_FORMAT(`Copied last message to clipboard.`));
  },

  [RENAME_COMMAND]: async (input: string) => {
    const newName = input.slice(RENAME_COMMAND.length).trim();

    if (newName) {
      await renameConversation(ROOT_DIR, CONVERSATION_BASENAME, newName);
      CONVERSATION_BASENAME = newName;
    } else {
      console.log(
        META_FORMAT(`No name provided. Usage: ${RENAME_COMMAND} <name>`)
      );
    }
  },

  [AUTO_NAME_COMMAND]: async (input: string) => {
    const newName = await generateTitle(model, messages);

    if (newName) {
      await renameConversation(ROOT_DIR, CONVERSATION_BASENAME, newName);
      CONVERSATION_BASENAME = newName;
    } else {
      console.log(META_FORMAT(`No name suggested.`));
    }
  },

  [DELETE_COMMAND]: async (input: string) => {
    console.clear();

    await $`rm ${ROOT_DIR}/${CONVERSATION_BASENAME}.md`;
    console.log(META_FORMAT(`Deleted conversation "${CONVERSATION_BASENAME}"`));

    messages.length = 0;
    CONVERSATION_BASENAME = uuid4();

    setTerminalTitle(CONVERSATION_BASENAME);

    console.log(META_FORMAT(`Started a new conversation with ${model}.`));
  },

  [DROP_LAST_COMMAND]: async (input: string) => {
    if (messages.length < 2) {
      console.log(META_FORMAT(`No messages to drop.`));
    } else {
      messages.pop();
      messages.pop();

      writeConversation(ROOT_DIR, CONVERSATION_BASENAME, messages, { model });
      console.log(META_FORMAT(`Dropped last message.`));
    }
  },

  [PWD_COMMAND]: async (input: string) => {
    console.log(META_FORMAT(`Current working directory: ${ROOT_DIR}`));
  },
};

console.clear();

const ROOT_DIR = argv._[0] ?? `${os.homedir()}/.ai`;

let CONVERSATION_BASENAME = uuid4();

// Ensure the conversations directory exists
await $`mkdir -p ${ROOT_DIR}`;

// List sessions
if (argv.list) {
  await listConversations(ROOT_DIR);

  process.exit(0);
}

// List models and exit if given the --models flag
if (argv.models) {
  await listModels();

  process.exit(0);
}

// The LLM model to use
let provider = argv.provider ?? "openai";
let model = argv.model ?? "gpt-4o";

// The messages in the conversation
const messages: Conversation = [];

// Continue a previous conversation?
if (argv.continue || argv.resume) {
  const conversationBasename = await chooseConversation(ROOT_DIR);

  if (!conversationBasename) {
    process.exit(1);
  }

  CONVERSATION_BASENAME = conversationBasename;

  const content = await fs.readFile(
    path.join(ROOT_DIR, conversationBasename + ".md"),
    "utf8"
  );
  const { meta, messages: history } = await parseChat(content);

  if ("model" in meta) {
    model = meta.model;
  }

  messages.push(...history);

  const lastMessage = messages[messages.length - 1];

  // Display the last message of the conversation
  const lastMessageFormatted = await formatMarkdown(lastMessage.content);
  console.log(ASSISTANT_PROMPT + lastMessageFormatted + "\n");
}

if (argv.complete) {
  const conversationBasename = argv.complete;

  if (!conversationBasename) {
    console.log(
      META_FORMAT(`Usage: ${process.argv[1]} --complete <conversation>`)
    );
    process.exit(1);
  }

  const content = await fs.readFile(
    path.join(ROOT_DIR, conversationBasename + ".md"),
    "utf8"
  );
  const { meta, messages } = await parseChat(content);

  if ("model" in meta) {
    model = meta.model;
  }

  const response = await completeConversation(model, messages);

  const completed = [
    ...messages,
    {
      role: "assistant",
      content: response,
    },
  ];

  const wordCount = countWords(response);
  const estimatedReadingTime = estimateReadingTime(response);
  console.log(
    META_FORMAT(
      `\n\nEstimated reading time: ${estimatedReadingTime} minutes (${wordCount} words)`
    )
  );

  const target = argv.target;
  if (target) {
    await writeConversation(ROOT_DIR, target, completed, { model });
  }

  const output = argv.output;
  if (output) {
    await fs.writeFile(withDefaultExtension(output, ".md"), response, "utf8");
  }

  process.exit(0);
}

// Delete a previous conversation
if (argv.delete) {
  const conversationBasename = await chooseConversation(ROOT_DIR);

  if (!conversationBasename) {
    process.exit(1);
  }

  await $`rm ${ROOT_DIR}/${conversationBasename}.md`;

  console.log(META_FORMAT(`Deleted conversation "${conversationBasename}"`));

  process.exit(0);
}

// Append the message and journal the conversation
const appendMessage = (message: ChatMessage) => {
  messages.push({ id: uuid4(), ...message });
  writeConversation(ROOT_DIR, CONVERSATION_BASENAME, messages, { model });
};

setTerminalTitle(CONVERSATION_BASENAME);

// Welcome message
const action = messages.length ? "resumed" : "started";
console.log(
  META_FORMAT(
    `Chat with ${model} ${action}. Type '${EXIT_COMMAND}' to end the conversation. An empty line sends the current message buffer.`
  )
);

let inputBuffer = "";

// Main chat loop
while (true) {
  console.log("");
  const input = await question(
    inputBuffer.length === 0 ? USER_PROMPT : USER_PROMPT_2
  );

  if (input.toLowerCase() === ".exit") {
    console.log(META_FORMAT(`Did you mean ${EXIT_COMMAND}?`));
    continue;
  }

  const [command] = input.toLowerCase().split(" ");
  if (command in COMMANDS) {
    await COMMANDS[command](input);
    continue;
  }

  if (input.startsWith("/")) {
    console.log(META_FORMAT(`Unknown command: ${input}`));
    continue;
  }

  // Non-empty lines are appended to the current message
  if (input.length !== 0) {
    inputBuffer += input;
    setTerminalTitle("Press ENTER again to send the message.", { bell: true });
    continue;
  }

  setTerminalTitle(CONVERSATION_BASENAME);

  appendMessage({ role: "user", content: inputBuffer });

  const response = await completeConversation(model, messages);

  appendMessage({
    role: "assistant",
    content: response,
  });

  inputBuffer = "";
}
