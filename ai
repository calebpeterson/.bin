#!/usr/bin/env bun

import "zx/globals";
import OpenAI from "openai";
import { v4 as uuid4 } from "uuid";
import { ENV } from "./lib/read-env.mjs";
import { choose } from "./lib/index.mjs";
import { lines } from "./lib/lines";
import { formatMarkdown } from "./lib/format-markdown";
import { setTerminalTitle } from "./lib/set-terminal-title";
import { stringifyChat } from "./lib/stringify-llm-chat";
import { parseChat } from "./lib/parse-llm-chat";
import { ChatMessage, Conversation } from "./lib/llm-types";

console.clear();

const BASE_DIR = argv._[0] ?? os.homedir();
const ROOT_DIR = `${BASE_DIR}/.ai`;

let CONVERSATION_BASENAME = uuid4();

const EXIT_COMMAND = "/exit";
const RENAME_COMMAND = "/rename";
const DELETE_COMMAND = "/delete";

const USER_PROMPT = chalk.blue("â–¸ ");

const ASSISTANT_FORMAT = chalk.blue;
const ASSISTANT_PROMPT = ASSISTANT_FORMAT("");

const META_FORMAT = chalk.grey.italic;

// Ensure the conversations directory exists
await $`mkdir -p ${ROOT_DIR}`;

// Create the OpenAI client
const openai = new OpenAI({
  organization: ENV.OPENAI_ORGANIZATION,
  apiKey: ENV.OPENAI_API_KEY,
});

const getConversationBasenames = async () =>
  lines(await $`ls ${ROOT_DIR}`).map((filename) => path.parse(filename).name);

// List models and exit if given the --models flag
if (argv.models) {
  const response = await openai.models.list();
  const models = response.data;
  const chatModels = models.filter(
    (model) =>
      // All GPT models
      model.id.includes("gpt-") &&
      // Exclude fine-tuned models
      !model.id.includes("ft:")
  );

  console.log("Available Chat Models:");

  console.log();
  for (const model of chatModels) {
    console.log("  " + model.id);
  }
  console.log();

  process.exit(0);
}

// The LLM model to use
const model = argv.model ?? "gpt-4o";

// The messages in the conversation
const messages: ChatMessage[] = [];

// Prompt the user to pick from existing conversations
const chooseConversation = async () => {
  const conversationBasenames = await getConversationBasenames();
  const conversationBasename = await choose(conversationBasenames);

  return conversationBasename;
};

// Continue a previous conversation?
if (argv.continue || argv.resume) {
  const conversationBasename = await chooseConversation();

  if (!conversationBasename) {
    process.exit(1);
  }

  CONVERSATION_BASENAME = conversationBasename;

  const content = await fs.readFile(
    path.join(ROOT_DIR, conversationBasename + ".md"),
    "utf8"
  );
  const history = parseChat(content);

  messages.push(...history);

  const lastMessage = messages[messages.length - 1];

  // Display the last message in the conversation
  console.log(ASSISTANT_PROMPT + formatMarkdown(lastMessage.content) + "\n");
}

setTerminalTitle(CONVERSATION_BASENAME);

// Delete a previous conversation?
if (argv.delete) {
  const conversationBasename = await chooseConversation();

  if (!conversationBasename) {
    process.exit(1);
  }

  await $`rm ${ROOT_DIR}/${conversationBasename}.md`;

  console.log(META_FORMAT(`Deleted conversation "${conversationBasename}"`));

  process.exit(0);
}

// List sessions
if (argv.list) {
  const conversationBasenames = await getConversationBasenames();

  console.log("Conversations:");

  console.log();
  for (const conversationBasename of conversationBasenames) {
    console.log("  " + conversationBasename);
  }
  console.log();

  process.exit(0);
}

// Append the message and journal the conversation
const appendMessage = (message: ChatMessage) => {
  messages.push({ id: uuid4(), ...message });
  fs.writeFile(
    path.join(ROOT_DIR, `${CONVERSATION_BASENAME}.md`),
    stringifyChat(messages),
    (err) => {
      if (err) {
        console.error(err);
      }
    }
  );
};

// Stream the response to the console
async function streamResponse(userInput: string) {
  appendMessage({ role: "user", content: userInput });

  const stream = await openai.chat.completions.create({
    model,
    messages,
    stream: true,
  });

  // Show a spinner while streaming the response
  let buffer = "";
  await spinner(async () => {
    for await (const chunk of stream) {
      const content = chunk.choices[0]?.delta?.content || "";
      buffer += content;
    }
  });

  process.stdout.write(`\n${ASSISTANT_PROMPT}`);
  process.stdout.write(await formatMarkdown(buffer));

  process.stdout.write("\n\n" + USER_PROMPT);

  appendMessage({
    role: "assistant",
    content: buffer,
  });
}

// Welcome message
console.log(
  META_FORMAT(
    `Chat ${
      messages.length ? "resumed" : "started"
    }. Type '${EXIT_COMMAND}' to end the conversation.\n`
  )
);

// Main chat loop
while (true) {
  const input = await question(USER_PROMPT);

  if (input.toLowerCase() === ".exit") {
    console.log(META_FORMAT(`Did you mean ${EXIT_COMMAND}?`));
    continue;
  }

  if (input.toLowerCase() === EXIT_COMMAND) {
    console.clear();
    process.exit(0);
  }

  if (input.startsWith(RENAME_COMMAND)) {
    const newName = input.slice(RENAME_COMMAND.length).trim();
    const oldPath = path.join(ROOT_DIR, `${CONVERSATION_BASENAME}.md`);
    const newPath = path.join(ROOT_DIR, `${newName}.md`);

    await fs.rename(oldPath, newPath);

    console.log(META_FORMAT(`Renamed conversation to "${newName}"`));

    CONVERSATION_BASENAME = newName;
    setTerminalTitle(CONVERSATION_BASENAME);

    continue;
  }

  if (input.startsWith(DELETE_COMMAND)) {
    await $`rm ${ROOT_DIR}/${CONVERSATION_BASENAME}.md`;

    console.log(META_FORMAT(`Deleted conversation "${CONVERSATION_BASENAME}"`));

    process.exit();
  }

  await streamResponse(input);
}
