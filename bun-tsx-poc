#!/usr/bin/env bun

import "zx/globals";
import React, {
  createContext,
  memo,
  useContext,
  useState,
  useEffect,
} from "react";
import { render, Box, Text, useInput, useFocus, Spacer, useStdout } from "ink";

type ChatMessage = {
  role: "user" | "assistant";
  content: string;
};

const SHOW_DEV_TOOLS = true;

const useStdoutDimensions = (): [number, number] => {
  const { stdout } = useStdout();
  const [dimensions, setDimensions] = useState<[number, number]>([
    stdout.columns,
    stdout.rows,
  ]);

  useEffect(() => {
    const handler = () => setDimensions([stdout.columns, stdout.rows]);
    stdout.on("resize", handler);
    return () => {
      stdout.off("resize", handler);
    };
  }, [stdout]);

  return dimensions;
};

interface StateContextProps {
  status: string;
  setStatus: (status: string) => void;
}

const StateContext = createContext<StateContextProps>({
  status: "",
  setStatus: () => {},
});

const StateProvider: FC<{ children: React.ReactNode } & StateContextProps> = ({
  children,
  ...props
}) => {
  return (
    <StateContext.Provider value={props}>{children}</StateContext.Provider>
  );
};

interface MessageProps {
  message: ChatMessage;
}

const Message: FC<MessageProps> = memo(({ message }) => {
  const { role, content } = message;

  return (
    <Box>
      <Text color={role === "user" ? "blue" : "yellow"}>: </Text>
      <Text color={role === "user" ? "blue" : "yellow"}>
        {content}
        {"\n"}
      </Text>
    </Box>
  );
});

interface InputProps {
  prompt: string;
  onCommit: (prompt: string) => void;
  onDevMessage: (message: string) => void;
}

const Input: FC<InputProps> = memo(({ prompt, onCommit, onDevMessage }) => {
  const { setStatus } = useContext(StateContext);

  const [value, setValue] = useState("");
  const [cursor, setCursor] = useState(0);

  const canCommit =
    value.length > 0 && value.lastIndexOf("\n") !== value.length - 1;

  useInput((input, key) => {
    onDevMessage(
      `${input} ${JSON.stringify(key)
        .replace(/"/g, "")
        .replace(/Arrow/g, "")
        .replace(/true/g, "T")
        .replace(/false/g, "F")}`
    );

    if (key.return && canCommit) {
      setValue("");
      setCursor(0);
      onCommit(value.trim());
    } else if (key.return) {
      setValue((value: string) => value + "\n");
    } else if (key.delete || key.backspace) {
      setValue((value: string) => value.slice(0, -1));
      setCursor((c: number) => c - 1);
    } else if (input === "g" && key.ctrl) {
      setValue("");
      setCursor(0);
    } else if (key.leftArrow || (input === "b" && key.ctrl)) {
      setCursor((c: number) => Math.max(c - 1, 0));
    } else if (key.rightArrow || (input === "f" && key.ctrl)) {
      setCursor((c: number) => Math.min(c + 1, value.length));
    } else if (input === "a" && key.ctrl) {
      setCursor(0);
    } else if (input === "e" && key.ctrl) {
      setCursor(value.length);
    } else {
      setValue((value: string) => value + input);
      setCursor((c: number) => c + 1);
    }
  });

  useEffect(() => {
    setStatus(`Length: ${value.length} Cursor: ${cursor}`);
  }, [value]);

  const before = value.slice(0, cursor);
  const current = value[cursor];
  const after = value.slice(cursor + 1);

  return (
    <Text>
      <Text color="green">{prompt}</Text>
      <Text>{before}</Text>
      <Text color="black" backgroundColor="white">
        {current}
      </Text>
      {after.length === 0 && !current ? (
        <Text color="black" backgroundColor="white">
          {" "}
        </Text>
      ) : (
        <Text>{after}</Text>
      )}
    </Text>
  );
});

const App = () => {
  const [columns, rows] = useStdoutDimensions();

  const [status, setStatus] = useState("");

  const [buffer, setBuffer] = useState<ChatMessage[]>([]);
  const [devMessage, setDevMessage] = useState("");

  const onCommit = (input: string) => {
    setBuffer([
      ...buffer,
      { role: "user", content: input },
      { role: "assistant", content: input },
    ]);
  };

  return (
    <StateProvider status={status} setStatus={setStatus}>
      <Box
        width={columns}
        height={rows}
        minHeight="100%"
        flexDirection="column"
        justifyContent="space-between"
      >
        <Box flexGrow={1} flexDirection="column" height="100%" width="100%">
          {buffer.map((message, index) => (
            <Message key={index} message={message} />
          ))}
          <Input prompt=": " onCommit={onCommit} onDevMessage={setDevMessage} />
        </Box>
        <Spacer />
        <Box>
          <Text>{status}</Text>
        </Box>

        {SHOW_DEV_TOOLS && (
          <Box borderStyle="round" borderColor="gray" gap={1}>
            <Text color="white">
              {columns} x {rows}
            </Text>
            <Text color="white">{devMessage}</Text>
          </Box>
        )}
      </Box>
    </StateProvider>
  );
};

console.clear();

const { waitUntilExit } = render(<App />);

await waitUntilExit();

console.clear();
