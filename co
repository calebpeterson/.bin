#!/usr/bin/env zx

// TODO: add support for -b option to force create if no matching branches exist

import { toBoolean, lines, extract, choose } from "./lib/index.mjs";

const isGitRepository = toBoolean(
  await $`git rev-parse --is-inside-work-tree`.quiet()
);

if (!isGitRepository) {
  console.error("Not a git repository");
  process.exit(1);
}

const query = argv._[0] ?? "";

const recentBranches = lines(
  await $`git reflog show --pretty=format:'%gs'`.quiet()
)
  // Checkouts are the only useful reflog entries
  .filter((entry) => entry.includes("checkout:"))
  // Extract the branch name from each reflog entry
  .map((entry) => extract(/moving from (\S*?) to/g, entry))
  // Take the first 250
  .slice(0, 250);

// Unique branch names
const uniqueBranches = [...new Set(recentBranches)];

// Filter branches
const filteredBranches = uniqueBranches.filter((branch) =>
  branch.includes(query)
);

// Available branches to select from - either the filter
// or all recent branches if nothing matches the filter.
const availableBranches =
  filteredBranches.length > 0 ? filteredBranches : uniqueBranches;

// Prompt the user to select a branch
const selectedBranch = await choose(availableBranches, { query });

if (!selectedBranch) {
  process.exit(0);
}

const doesBranchExist = toBoolean(
  await $`git rev-parse --verify --quiet ${selectedBranch}`.quiet().nothrow()
);

if (doesBranchExist) {
  // Checkout the branch if it exists
  await $`git checkout ${selectedBranch}`;
} else {
  // Create the branch if it doesn't exist
  echo("Branch does not exist, creating...");
  await $`git checkout -b ${selectedBranch}`;
}
